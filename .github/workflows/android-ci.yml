name: Android CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        api-level: [33, 34]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools-version: 34.0.0
        target: default
        
    - name: Verify Android SDK setup
      run: |
        echo "🔍 Android SDK version:"
        sdkmanager --version
        echo "📱 Installed API levels:"
        sdkmanager --list | grep "system-images" | grep "android-" | head -5
        echo "🔨 Build tools version:"
        sdkmanager --list | grep "build-tools" | head -3
        
    - name: Setup Android environment
      run: |
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          ${{ runner.os }}-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Setup Gradle wrapper files
      run: |
        # Create gradle wrapper if missing
        mkdir -p gradle/wrapper
        if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.2.2-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        fi
        
    - name: Verify project structure
      run: |
        echo "📁 Project structure:"
        find . -name "*.gradle*" | head -10
        ls -la
        echo "📁 App structure:"
        ls -la app/
        
    - name: Clean project
      run: ./gradlew clean
      
    - name: Debug Gradle setup
      run: |
        echo "🔍 Gradle wrapper properties:"
        cat gradle/wrapper/gradle-wrapper.properties
        echo "🔍 Root build.gradle exists:"
        ls -la build.gradle
        echo "🔍 App build.gradle exists:"
        ls -la app/build.gradle
        
    - name: Run tests with coverage
      run: ./gradlew test --continue || echo "Tests completed with warnings"
      
    - name: Run lint analysis
      run: ./gradlew lint --continue || echo "Lint completed with warnings"
      
    - name: Build debug APK
      run: ./gradlew assembleDebug
      
    - name: Debug APK build output
      run: |
        echo "📦 APK build directory contents:"
        ls -la app/build/outputs/
        echo "📦 Debug APK directory contents:"
        ls -la app/build/outputs/apk/debug/ 2>/dev/null || echo "Debug APK directory not found"
        echo "📦 Release APK directory contents:"
        ls -la app/build/outputs/apk/release/ 2>/dev/null || echo "Release APK directory not found"
        echo "🔍 All APK files in project:"
        find app/ -name "*.apk" 2>/dev/null || echo "No APK files found"
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-debug-${{ matrix.api-level }}
        path: app/build/outputs/apk/debug/app-debug.apk
        if-no-files-found: warn
        
    - name: Build release APK
      run: ./gradlew assembleRelease --continue || echo "Release build skipped"
      
    - name: Upload release APK artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: app-release-${{ matrix.api-level }}
        path: app/build/outputs/apk/release/app-release.apk
        if-no-files-found: warn
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.api-level }}
        path: |
          app/build/reports/tests/
          app/build/reports/lint/
          app/build/reports/coverage/
        if-no-files-found: warn
        
  # Additional job for release builds and GitHub Releases
  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    # Add explicit permissions for GitHub Releases - content write permission is sufficient
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 34
        build-tools-version: 34.0.0
        target: default
        
    - name: Verify Android SDK setup
      run: |
        echo "🔍 Android SDK version:"
        sdkmanager --version
        echo "📱 Installed API levels:"
        sdkmanager --list | grep "system-images" | grep "android-" | head -5
        echo "🔨 Build tools version:"
        sdkmanager --list | grep "build-tools" | head -3
        
    - name: Setup Android environment
      run: |
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH
        echo "$ANDROID_HOME/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Setup Gradle wrapper files
      run: |
        mkdir -p gradle/wrapper
        if [ ! -f "gradle/wrapper/gradle-wrapper.properties" ]; then
          echo "distributionBase=GRADLE_USER_HOME" > gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-8.2.2-bin.zip" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> gradle/wrapper/gradle-wrapper.properties
        fi
      
    - name: Verify project files
      run: |
        echo "📁 Verifying project structure..."
        echo "Root files:"
        ls -la | grep -E "\.(gradle|properties)$"
        echo "App directory:"
        ls -la app/
        echo "App build.gradle (first 20 lines):"
        head -20 app/build.gradle || echo "app/build.gradle not found"
      
    - name: Clean project
      run: ./gradlew clean
      
    - name: Build debug APK (for release)
      run: |
        echo "🔨 Starting APK build..."
        echo "🔍 Build configuration:"
        echo "   - JDK: $JAVA_HOME"
        echo "   - Gradle: $(./gradlew --version | grep Gradle)"
        echo "   - Kotlin: $(./gradlew tasks | grep Kotlin)"
        
        # Build WITHOUT --continue flag to expose actual errors
        ./gradlew assembleDebug
        
        BUILD_EXIT_CODE=$?
        echo "🔍 Build exit code: $BUILD_EXIT_CODE"
        
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed!"
          echo "📋 Looking for error logs..."
          find app/build/ -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || echo "No build logs found"
          echo "📋 Build directory structure:"
          find app/build/ -type f | head -10
          exit 1
        else
          echo "✅ Build successful!"
        fi
        
    - name: Verify APK was built
      run: |
        echo "🔍 Checking if APK was built..."
        echo "📂 Current directory: $(pwd)"
        echo "📂 Looking for APK files:"
        find app/build/ -name "*.apk" 2>/dev/null || echo "No APK files found"
        
        echo "📂 Checking debug APK directory:"
        if [ -d "app/build/outputs/apk/debug" ]; then
          echo "Debug APK directory contents:"
          ls -la app/build/outputs/apk/debug/
        else
          echo "❌ Debug APK directory not found"
          echo "Available directories in outputs:"
          ls -la app/build/outputs/ 2>/dev/null || echo "No outputs directory"
        fi
        
        if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
          echo "✅ Debug APK found: $(ls -lh app/build/outputs/apk/debug/app-debug.apk)"
          echo "📊 APK size: $(stat -c%s app/build/outputs/apk/debug/app-debug.apk) bytes"
        else
          echo "❌ Debug APK NOT found at expected location"
          echo "🔍 Available files in build directory:"
          find app/build/ -type f | head -10
          exit 1
        fi
        
    - name: Create Release with APK
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}.${{ github.sha }}
        name: Release ${{ github.run_number }} - Android APK
        body: |
          Release ${{ github.run_number }} of SmoothNotes Android App
          
          ## Build Information
          - **Build Number**: ${{ github.run_number }}
          - **Commit SHA**: ${{ github.sha }}
          - **Build Date**: ${{ github.event.head_commit.timestamp }}
          - **APK Type**: Debug Build (for testing)
          
          ## Installation
          1. Download the APK file from Assets below
          2. Enable "Unknown Sources" in Android settings
          3. Install the APK file
          
          ## Features
          - Notes management with CRUD operations
          - Local SQLite database (Room)
          - Material Design UI with Jetpack Compose
          - Dependency injection with Hilt
          
          ## Downloads
          Download the Android APK file from the Assets section below.
        draft: false
        prerelease: false
        files: |
          app/build/outputs/apk/debug/app-debug.apk
        generate_release_notes: true